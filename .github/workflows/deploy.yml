on:
  push:
    branches:
      - main
#------------------------------------------------------------------------------------------------------------------------------------------------------------ 
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: eu-central-1
#------------------------------------------------------------------------------------------------------------------------------------------------------------ 
jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip}}
  
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
#------------------------------------------------------------------------------------------------------------------------------------------------------------           
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="key=terraform.tfstate" -backend-config="region=$AWS_REGION"
        working-directory: ./terraform
#------------------------------------------------------------------------------------------------------------------------------------------------------------         
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
          -var="region=$AWS_REGION" \
          -var="public_key=$PUBLIC_SSH_KEY" \
          -var="private_key=$PRIVATE_SSH_KEY" \
          -var="key_name=deployer-key" \
          -out=PLAN
        working-directory: ./terraform
#------------------------------------------------------------------------------------------------------------------------------------------------------------         
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Set output
        id: set-ip
        run: |
          echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
        working-directory: ./terraform
#------------------------------------------------------------------------------------------------------------------------------------------------------------ 
  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set IP env variable
        run: echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
#------------------------------------------------------------------------------------------------------------------------------------------------------------         
      - name: Build and push Docker image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd nodeapp
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
#------------------------------------------------------------------------------------------------------------------------------------------------------------ 
      - name: Deploy Docker image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: eu-central-1
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: PRIVATE_SSH_KEY,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_REGION
          script: |-
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli -y
            sudo $(aws ecr get-login --no-include-email --region eu-central-1)
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG
#------------------------------------------------------------------------------------------------------------------------------------------------------------ 
  deploy-prometheus:
    needs: deploy-app
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Deploy Prometheus
        run: |
          aws ecr create-repository --repository-name prometheus
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID_ECR }}.dkr.ecr.eu-central-1.amazonaws.com
          docker pull prom/prometheus:latest
          docker tag prom/prometheus:latest ${{ secrets.AWS_ACCOUNT_ID_ECR }}.dkr.ecr.eu-central-1.amazonaws.com/prometheus:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID_ECR }}.dkr.ecr.eu-central-1.amazonaws.com/prometheus:latest
          # Deploy Prometheus using your desired method (e.g., ECS, Docker Compose, etc.)

#------------------------------------------------------------------------------------------------------------------------------------------------------------ 
  deploy-grafana:
    needs: deploy-app
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Deploy Grafana
        run: |
          aws ecr create-repository --repository-name grafana
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID_ECR }}.dkr.ecr.eu-central-1.amazonaws.com
          docker pull grafana/grafana-oss:9.1.4
          docker tag grafana/grafana-oss:9.1.4 ${{ secrets.AWS_ACCOUNT_ID_ECR }}.dkr.ecr.eu-central-1.amazonaws.com/grafana:9.1.4
          docker push ${{ secrets.AWS_ACCOUNT_ID_ECR }}.dkr.ecr.eu-central-1.amazonaws.com/grafana:9.1.4
          # Deploy Grafana using your desired method (e.g., ECS, Docker Compose, etc.)

#------------------------------------------------------------------------------------------------------------------------------------------------------------         

            
#------------------------------------------------------------------------------------------------------------------------------------------------------------


# selenium-test:
  #   runs-on: ubuntu-latest
  #   needs: deploy-app
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Setup Selenium
  #       run: |
  #         sudo apt update
  #         sudo apt install -y unzip wget xvfb libxi6 libgconf-2-4 default-jdk
  #         wget https://chromedriver.storage.googleapis.com/91.0.4472.19/chromedriver_linux64.zip
  #         unzip chromedriver_linux64.zip
  #         sudo mv chromedriver /usr/local/bin/
  #         sudo chown root:root /usr/local/bin/chromedriver
  #         sudo chmod +x /usr/local/bin/chromedriver
  #         wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  #         sudo dpkg -i google-chrome-stable_current_amd64.deb
  #         sudo apt --fix-broken install -y
  #     - name: Selenium Test
  #       run: |
  #         npm install selenium-webdriver
  #         # Add your Selenium test commands here
  #         echo "Running Selenium tests..."
  #         node selenium-tests.js
  #         node server.js
  #       working-directory: ./tests
